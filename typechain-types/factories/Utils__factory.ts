/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Utils, UtilsInterface } from "../Utils";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "stringA",
        type: "string",
      },
      {
        internalType: "string",
        name: "stringB",
        type: "string",
      },
    ],
    name: "isEqual",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x61037b610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063465c41051461003a575b600080fd5b610054600480360381019061004f919061013c565b61006a565b60405161006191906101ff565b60405180910390f35b60008160405160200161007d91906101e8565b60405160208183030381529060405280519060200120836040516020016100a491906101e8565b6040516020818303038152906040528051906020012014156100c957600190506100ce565b600090505b92915050565b60006100e76100e28461023f565b61021a565b9050828152602081018484840111156100ff57600080fd5b61010a848285610292565b509392505050565b600082601f83011261012357600080fd5b81356101338482602086016100d4565b91505092915050565b6000806040838503121561014f57600080fd5b600083013567ffffffffffffffff81111561016957600080fd5b61017585828601610112565b925050602083013567ffffffffffffffff81111561019257600080fd5b61019e85828601610112565b9150509250929050565b6101b181610286565b82525050565b60006101c282610270565b6101cc818561027b565b93506101dc8185602086016102a1565b80840191505092915050565b60006101f482846101b7565b915081905092915050565b600060208201905061021460008301846101a8565b92915050565b6000610224610235565b905061023082826102d4565b919050565b6000604051905090565b600067ffffffffffffffff82111561025a57610259610305565b5b61026382610334565b9050602081019050919050565b600081519050919050565b600081905092915050565b60008115159050919050565b82818337600083830152505050565b60005b838110156102bf5780820151818401526020810190506102a4565b838111156102ce576000848401525b50505050565b6102dd82610334565b810181811067ffffffffffffffff821117156102fc576102fb610305565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f830116905091905056fea2646970667358221220969e71cffe0b189e38a1fd89a30378f2ae54a77bfd22cf870e3f148bc454ff2a64736f6c63430008040033";

type UtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Utils__factory extends ContractFactory {
  constructor(...args: UtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Utils";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Utils> {
    return super.deploy(overrides || {}) as Promise<Utils>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Utils {
    return super.attach(address) as Utils;
  }
  connect(signer: Signer): Utils__factory {
    return super.connect(signer) as Utils__factory;
  }
  static readonly contractName: "Utils";
  public readonly contractName: "Utils";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UtilsInterface {
    return new utils.Interface(_abi) as UtilsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Utils {
    return new Contract(address, _abi, signerOrProvider) as Utils;
  }
}
